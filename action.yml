name: 'GAWG Build action'
description: 'This action checks the technology used in the project (Python or Node.js), performs a build operation, and then uploads the resulting build artifacts. The artifacts are retained for a specified number of days. This action is useful for continuous integration workflows where you want to build your project and store the build output for later use or deployment.'
author: Álvaro García Pizarro
branding:
  icon: 'cpu'
  color: 'gray-dark'

inputs:
  technology:
    type: string
    description: 'Technology to use for the build. Avaliable options: maven, python, node, gradle.'
    required: true

  config-json:
    type: string
    description: 'JSON string containing workflow config parameters.'
    required: true

outputs:
  ARTIFACT_NAME:
    description: 'Name of the artifact generated by the build.'
    value: ${{ steps.artifact-name.outputs.ARTIFACT_NAME }}

runs:
  using: "composite"
  steps:
    - name: Validate technology
      shell: bash
      run: |
        echo ""
        echo "========================================= TECHNOLOGY VALIDATION =========================================="
        TECHNOLOGIES=("python" "node" "maven")
        if [[ " ${TECHNOLOGIES[@]} " =~ " ${{ inputs.technology }} " ]]; then
          echo "✅ ${{ inputs.technology }} is a valid technology."
          echo "## Build status information" >> $GITHUB_STEP_SUMMARY
          echo "✅ ${{ inputs.technology }} technology validation PASSED." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Error: ${{ inputs.technology }} is not a valid technology."
          echo "::error:: ❌ Error: ${{ inputs.technology }} is not a valid technology."
          echo "## Build status information" >> $GITHUB_STEP_SUMMARY
          echo "❌ ${{ inputs.technology }} technology validation FAILED." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi
        echo ""

    - name: Generate artifact name
      shell: bash
      id: artifact-name
      run: |
        echo ""
        echo "========================================= ARTIFACT NAME =========================================="
        echo "Generating artifact name..."
        echo "ARTIFACT_NAME is: $(echo ${{ fromJson(inputs.config-json).PROJECT_NAME }}-${{ inputs.technology }}-$(date +'%Y%m%d%H%M%S'))"
        echo "ARTIFACT_NAME=$(echo ${{ fromJson(inputs.config-json).PROJECT_NAME }}-${{ inputs.technology }}-$(date +'%Y%m%d%H%M%S'))" >> $GITHUB_OUTPUT
        echo "✅ Artifact name generated successfully."
        echo "🔧 Artifact name generated: $(echo ${{ fromJson(inputs.config-json).PROJECT_NAME }}-${{ inputs.technology }}-$(date +'%Y%m%d%H%M%S'))." >> $GITHUB_STEP_SUMMARY
        echo ""

    - name: Set-up JAVA environment
      if: ${{ inputs.technology == 'maven' }}
      uses: actions/setup-java@v4
      with:
        distribution: ${{ fromJson(inputs.config-json).JAVA_DISTRIBUTION }}
        java-version: ${{ fromJson(inputs.config-json).JAVA_VERSION }}

    - name: Build maven project
      id: build-maven
      if: ${{ inputs.technology == 'maven' }}
      shell: bash
      run: |
        echo "Building maven project..."
        output=$(mvn clean install 2>&1)
        status=$?
        echo "$output"
        if [ $status -eq 0 ]; then
          echo "✅ Maven Build Status: SUCCESS"
          echo "✅ Maven Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Maven Build Status: FAILED"
          echo "❌ Maven Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Create JAVA artifact
      if: ${{ inputs.technology == 'maven' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.ARTIFACT_NAME }}
        retention-days: ${{ fromJson(inputs.config-json).RETENTION_DAYS }}
        overwrite: true
        path: ${{ fromJson(inputs.config-json).JAVA_DIST_DIR }}

    - name: Set-up Python environment
      if: ${{ inputs.technology == 'python' }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ fromJson(inputs.config-json).PYTHON_VERSION }}

    - name: Build python project
      id: build-python
      if: ${{ inputs.technology == 'python' }}
      shell: bash
      run: |
        echo "Building python project..."
        output=$(python3 -m pip install -r requirements.txt 2>&1)
        status=$?
        echo "$output"
        if [ $status -eq 0 ]; then
          echo "✅ Python Build Status: SUCCESS"
          echo "✅ Python Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Python Build Status: FAILED"
          echo "❌ Python Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    - name: Create Python artifact
      if: ${{ inputs.technology == 'python' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.artifact-name.outputs.ARTIFACT_NAME }}
        retention-days: ${{ fromJson(inputs.config-json).RETENTION_DAYS }}
        overwrite: true
        path: ${{ fromJson(inputs.config-json).PYTHON_DIST_DIR }}

    - name: Set-up Node environment
      if: ${{ inputs.technology == 'node' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ fromJson(inputs.config-json).NODE_VERSION }} 

    - name: Build node project
      id: build-node
      if: ${{ inputs.technology == 'node' }}
      shell: bash
      run: |
        echo "Building node project..."
        npm install
        output=$(npm run build 2>&1)
        status=$?
        echo "$output"
        if [ $status -eq 0 ]; then
          echo "✅ Node Build Status: SUCCESS"
          echo "✅ Node Build Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Node Build Status: FAILED"
          echo "❌ Node Build Status: FAILED" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi

    # - name: Create Node artifact
    #   if: ${{ inputs.technology == 'node' }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ steps.artifact-name.outputs.ARTIFACT_NAME }}
    #     retention-days: ${{ fromJson(inputs.config-json).RETENTION_DAYS }}
    #     overwrite: true
    #     path: ${{ fromJson(inputs.config-json).NODE_DIST_DIR }}